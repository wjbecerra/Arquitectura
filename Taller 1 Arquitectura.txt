Nombre: Wilmar Javier Becerra Aragón
Código: 94539351


2. Escriba los 4 principios de diseño de hardware aprendidos en clase.

R/.
1. La simplicidad favorece la regularidad
2. Entre mas pequeño, más rápido.
3. Hacer el caso común más rápido.
4. Buenos diseños requieren grandes compromisos.



3. Convertir a instrucciones de bajo nivel.

int x= 0; 
int y = 8; 
int z = 1; 

y=x+3;
z=z+3;
x=(x-z)+(3+y);


R./
or %g0,0,&L0;
or %g0,8,&L1;
or %g0,1,&L2;
add %L0,3,%L1;
add %L2,3,%L2;
sub %L0,%L2,%L3;
add %L2,3,%L4;
add %L3,%L4,%L0;


4. Usar el ld, y st.
a[4]= a[2]+x;
y = y[40]+13;

R./
a.) a=%L1	x=%L2
ld  %L1,[2*4],%L3;
add %L3,%L2,%L2;
st  %L2,%L1,[4*4]

b.) y=%L1
ld  %L1,[40*4],%L2;
add %L2,13,%L2;
st  %L2,%L1,[0*4]


5. 
5. Convertir a lenguaje de maquina.
a.
int main(){
	
	int i =3; p=2;
	return i+3;
}

R./	i= %L1	p=%L2

add %g0,3,%L1;
add %g0,2,%L2;
add %L1,3,%o0


b.)

int main(){
	int p=3; x=1; z=4;
	int w=0; 
	w=(p+40)+(x-z);
	return 0; 
}

R./	p=%L0	x=%L1	z=%L2	w=%L3

add %g0,3,%L0;
add %g0,1,%L1;
add %g0,4,%L2;
add %g0,0,%L3;
add %L3,40,%L4;
sub %L1,%L2,%L5;
add %L4,%L5,%L3;
add %g0,0,%o0

6. Inicializar las siguientes variables negativas usando OR.

a.) 
n=-12
R./
or %g0,-12,%L0


b.)
a=-11
R./
or %g0,-11,%L1


c.)
b=-14
R./
or %g0,-14,%L2



	
